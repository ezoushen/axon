#!/bin/bash
# AXON - Nginx Configuration Library
# Functions for generating nginx site and upstream configurations

# Generate nginx site configuration for proxy-based (Docker) deployments
# Args: output_file, product_name, environment, domain, upstream_name, has_ssl, ssl_cert, ssl_key,
#       proxy_timeout, proxy_buffer_size, proxy_buffers, proxy_busy_buffers, custom_props
# Returns: 0 on success, 1 on failure
generate_nginx_proxy_site_config() {
    local output_file=$1
    local product_name=$2
    local environment=$3
    local domain=$4
    local upstream_name=$5
    local has_ssl=$6
    local ssl_cert=$7
    local ssl_key=$8
    local proxy_timeout=$9
    local proxy_buffer_size=${10}
    local proxy_buffers=${11}
    local proxy_busy_buffers=${12}
    local custom_props=${13}

    # Normalize timeout value (strip any existing 's' suffix to avoid duplication)
    proxy_timeout=$(echo "$proxy_timeout" | sed 's/s$//')

    # Generate site config
    cat > "$output_file" <<EOFSITE
    # AXON-managed site configuration for ${product_name} - ${environment}
    # Auto-generated by AXON deployment
    # Last updated: $(date)

    # HTTP Server
    server {
        listen 80;
        server_name ${domain};

        # Access logging
        access_log /var/log/nginx/${product_name}-${environment}.log combined;

        # To redirect HTTP to HTTPS, uncomment the line below and comment out the location block:
        # return 301 https://\$server_name\$request_uri;

        location / {
            proxy_pass http://${upstream_name};

            # Proxy protocol and headers
            proxy_http_version 1.1;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host \$host:\$server_port;
            proxy_set_header X-Forwarded-Proto \$scheme;

            # WebSocket support
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection \$connection_upgrade;

            # Proxy timeouts
            proxy_connect_timeout ${proxy_timeout}s;
            proxy_send_timeout ${proxy_timeout}s;
            proxy_read_timeout ${proxy_timeout}s;

            # Buffer sizes
            proxy_buffer_size ${proxy_buffer_size};
            proxy_buffers ${proxy_buffers};
            proxy_busy_buffers_size ${proxy_busy_buffers};
EOFSITE

    # Add custom properties if present
    if [ -n "$custom_props" ]; then
        echo "" >> "$output_file"
        echo "        # Custom nginx properties from config" >> "$output_file"
        echo "$custom_props" | sed 's/^/        /' >> "$output_file"
    fi

    # Close HTTP location and server block
    cat >> "$output_file" <<'EOFSITE2'
        }

        # Health check endpoint (optional, no logging)
        location /health {
            access_log off;
            proxy_pass http://UPSTREAM_NAME_PLACEHOLDER/health;
        }
    }
EOFSITE2

    # Generate HTTPS server block if SSL is configured
    if [ "$has_ssl" = "true" ]; then
        cat >> "$output_file" <<EOFHTTPS

    # HTTPS Server
    server {
        listen 443 ssl http2;
        server_name ${domain};

        # Access logging
        access_log /var/log/nginx/${product_name}-${environment}.log combined;

        # SSL certificates
        ssl_certificate ${ssl_cert};
        ssl_certificate_key ${ssl_key};

        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;

        location / {
            proxy_pass http://${upstream_name};

            # Proxy protocol and headers
            proxy_http_version 1.1;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host \$host:\$server_port;
            proxy_set_header X-Forwarded-Proto \$scheme;

            # WebSocket support
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection \$connection_upgrade;

            # Proxy timeouts
            proxy_connect_timeout ${proxy_timeout}s;
            proxy_send_timeout ${proxy_timeout}s;
            proxy_read_timeout ${proxy_timeout}s;

            # Buffer sizes
            proxy_buffer_size ${proxy_buffer_size};
            proxy_buffers ${proxy_buffers};
            proxy_busy_buffers_size ${proxy_busy_buffers};
EOFHTTPS

        # Add custom properties to HTTPS block if present
        if [ -n "$custom_props" ]; then
            echo "" >> "$output_file"
            echo "        # Custom nginx properties from config" >> "$output_file"
            echo "$custom_props" | sed 's/^/        /' >> "$output_file"
        fi

        # Close HTTPS location and server block
        cat >> "$output_file" <<'EOFHTTPS2'
        }

        # Health check endpoint (optional, no logging)
        location /health {
            access_log off;
            proxy_pass http://UPSTREAM_NAME_PLACEHOLDER/health;
        }
    }
EOFHTTPS2
    fi

    # Replace placeholders
    sed -i.bak "s|UPSTREAM_NAME_PLACEHOLDER|${upstream_name}|g" "$output_file"
    rm -f "${output_file}.bak"

    return 0
}

# Generate nginx site configuration for static file deployments
# Args: output_file, product_name, environment, domain, document_root, has_ssl, ssl_cert, ssl_key, custom_props
# Returns: 0 on success, 1 on failure
generate_nginx_static_site_config() {
    local output_file=$1
    local product_name=$2
    local environment=$3
    local domain=$4
    local document_root=$5
    local has_ssl=$6
    local ssl_cert=$7
    local ssl_key=$8
    local custom_props=$9

    # Generate site config for static files
    cat > "$output_file" <<EOFSITE
# AXON-managed static site configuration for ${product_name} - ${environment}
# Auto-generated by AXON deployment
# Last updated: $(date)

# HTTP Server
server {
    listen 80;
    server_name ${domain};

    # Access logging
    access_log /var/log/nginx/${product_name}-${environment}.log combined;
    error_log /var/log/nginx/${product_name}-${environment}-error.log warn;

    # Document root
    root ${document_root};
    index index.html index.htm;

    # To redirect HTTP to HTTPS, uncomment the line below and comment out the location block:
    # return 301 https://\$server_name\$request_uri;

    # Security: Block access to hidden files and directories
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    # Security: Block access to sensitive file types
    location ~* \.(env|git|gitignore|gitattributes|yml|yaml|ini|config|log|sql|bak|swp|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    # Security: Block common sensitive paths
    location ~* ^/(\.git|\.env|config\.json|config\.js|aws-config\.js|aws\.config\.js|\.gitlab-ci\.yml|backend/\.env|admin/\.env|core/\.env) {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    location / {
        try_files \$uri \$uri/ /index.html;
    }
EOFSITE

    # Add custom properties if present
    if [ -n "$custom_props" ]; then
        echo "" >> "$output_file"
        echo "    # Custom nginx properties from config" >> "$output_file"
        echo "$custom_props" | sed 's/^/    /' >> "$output_file"
    fi

    # Close HTTP server block
    echo "}" >> "$output_file"

    # Generate HTTPS server block if SSL is configured
    if [ "$has_ssl" = "true" ]; then
        cat >> "$output_file" <<EOFHTTPS

# HTTPS Server
server {
    listen 443 ssl http2;
    server_name ${domain};

    # Access logging
    access_log /var/log/nginx/${product_name}-${environment}.log combined;
    error_log /var/log/nginx/${product_name}-${environment}-error.log warn;

    # SSL certificates
    ssl_certificate ${ssl_cert};
    ssl_certificate_key ${ssl_key};

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # Document root
    root ${document_root};
    index index.html index.htm;

    # Security: Block access to hidden files and directories
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    # Security: Block access to sensitive file types
    location ~* \.(env|git|gitignore|gitattributes|yml|yaml|ini|config|log|sql|bak|swp|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    # Security: Block common sensitive paths
    location ~* ^/(\.git|\.env|config\.json|config\.js|aws-config\.js|aws\.config\.js|\.gitlab-ci\.yml|backend/\.env|admin/\.env|core/\.env) {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    location / {
        try_files \$uri \$uri/ /index.html;
    }
EOFHTTPS

        # Add custom properties to HTTPS block if present
        if [ -n "$custom_props" ]; then
            echo "" >> "$output_file"
            echo "    # Custom nginx properties from config" >> "$output_file"
            echo "$custom_props" | sed 's/^/    /' >> "$output_file"
        fi

        # Close HTTPS server block
        echo "}" >> "$output_file"
    fi

    return 0
}

# Generate nginx upstream configuration
# Args: output_file, product_name, environment, upstream_name, upstream_ip, upstream_port
# Returns: 0 on success, 1 on failure
generate_nginx_upstream_config() {
    local output_file=$1
    local product_name=$2
    local environment=$3
    local upstream_name=$4
    local upstream_ip=$5
    local upstream_port=$6

    cat > "$output_file" <<EOFUPSTREAM
    # AXON-managed upstream for ${product_name} - ${environment}
    # Auto-generated by AXON deployment
    # Last updated: $(date)

    upstream ${upstream_name} {
        server ${upstream_ip}:${upstream_port};
    }
EOFUPSTREAM

    return 0
}
