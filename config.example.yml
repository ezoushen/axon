# Deployment Configuration Example
# Copy this file to your product root as 'axon.config.yml' and customize
#
# IMPORTANT: All deployment scripts run from your LOCAL MACHINE
# and SSH to both Application Server and System Server to execute commands.
#
# LEGEND:
#   [REQUIRED] - Must be set, deployment will fail if missing
#   [OPTIONAL] - Can be omitted, will use default value shown in comment

# ==============================================================================
# Product Information
# ==============================================================================
product:
  name: "my-product"              # [REQUIRED] Product name (used for container/image naming)
  type: "docker"                  # [REQUIRED] Deployment type: "docker" or "static" (default: docker)
                                  # - docker: Container-based deployment to Application Server
                                  # - static: File-based deployment to System Server (HTML/JS/CSS)
  description: "My Application"   # [OPTIONAL] Product description (for documentation only)

# ==============================================================================
# Static Site Configuration
# ==============================================================================
# ONLY used when product.type: "static"
# Static sites are deployed directly to System Server using symlink-based atomic deployments
# No Docker containers or registry involved
#
# IMPORTANT: Build and deployment settings are per-environment (see environments section below)
# This section contains only GLOBAL operational settings that apply to all environments
static:
  # Global operational settings
  deploy_user: "www-data"                      # [OPTIONAL] File owner for deployed files (default: www-data)
                                               # Must match nginx user for proper permissions
  keep_releases: 5                             # [OPTIONAL] Number of previous releases to keep (default: 5)
                                               # Older releases are automatically cleaned up after deployment

  # Shared directories (persist across deployments)
  shared_dirs:                                 # [OPTIONAL] Directories to persist across deployments
    - "uploads"                                # Example: User-uploaded content
    # - "user-content"                         # Example: Additional persistent data

  # Build validation (optional)
  required_files:                              # [OPTIONAL] Files that must exist in build output
    - "index.html"                             # Deployment fails if these files are missing
    # - "assets/main.css"                      # Useful for catching incomplete builds

# NOTE: Per-environment settings (build_command, build_output_dir, deploy_path, domain)
# are configured in the "environments" section below

# ==============================================================================
# Container Registry Configuration
# ==============================================================================
# ONLY used when product.type: "docker"
# Choose ONE registry provider and configure its section below.
# Supported providers: docker_hub, aws_ecr, google_gcr, azure_acr

registry:
  provider: "aws_ecr"  # [REQUIRED] Registry provider to use

  # --------------------------------------------------------------------------
  # Docker Hub Configuration
  # --------------------------------------------------------------------------
  # Uncomment and configure this section if using Docker Hub
  # docker_hub:
  #   # Authentication method (choose ONE):
  #   # Option 1: Explicit credentials (recommended for CI/CD)
  #   username: "${DOCKER_HUB_USERNAME}"          # [OPTIONAL] Docker Hub username (supports env var)
  #   access_token: "${DOCKER_HUB_TOKEN}"         # [OPTIONAL] Personal Access Token (supports env var)
  #   # Option 2: Docker CLI config (default fallback)
  #   # If username and access_token are not provided, uses credentials from ~/.docker/config.json
  #   # Requires prior 'docker login' on local machine
  #
  #   namespace: "myuser"                         # [OPTIONAL] Namespace (default: username)
  #   repository: "my-product"                    # [OPTIONAL] Repository name (default: product.name)

  # --------------------------------------------------------------------------
  # AWS ECR Configuration (Example - Currently Active)
  # --------------------------------------------------------------------------
  aws_ecr:
    # Authentication method (choose ONE):
    # Option 1: AWS CLI profile (recommended for local development)
    profile: "default"                            # [OPTIONAL] AWS CLI profile name
    # Option 2: Direct credentials (recommended for CI/CD)
    # access_key_id: "${AWS_ACCESS_KEY_ID}"       # [OPTIONAL] AWS access key
    # secret_access_key: "${AWS_SECRET_ACCESS_KEY}" # [OPTIONAL] AWS secret key
    # session_token: "${AWS_SESSION_TOKEN}"       # [OPTIONAL] Session token (for temporary credentials)
    # Option 3: Credentials file
    # credentials_file: "~/.aws/credentials"      # [OPTIONAL] Path to credentials file
    # profile: "custom-profile"                   # [OPTIONAL] Profile within credentials file

    region: "${AWS_REGION:-ap-northeast-1}"       # [REQUIRED] AWS region (supports env var with default)
    account_id: "${AWS_ACCOUNT_ID}"               # [REQUIRED] AWS account ID (supports env var)
    repository: "my-product"                      # [OPTIONAL] ECR repository name (default: product.name)

  # --------------------------------------------------------------------------
  # Google Container Registry Configuration
  # --------------------------------------------------------------------------
  # Uncomment and configure this section if using GCR
  # google_gcr:
  #   # Authentication method (choose ONE):
  #   # Option 1: Service account key file (recommended for CI/CD)
  #   service_account_key: "~/gcp-key.json"       # [OPTIONAL] Service account key file path
  #   # Option 2: gcloud CLI (default fallback)
  #   # If service_account_key is not provided, uses 'gcloud auth' session
  #   # Requires prior 'gcloud auth login' on local machine
  #
  #   project_id: "${GCP_PROJECT_ID}"             # [REQUIRED] GCP project ID (supports env var)
  #   location: "us"                              # [OPTIONAL] Location: us, eu, asia (default: us)
  #   use_artifact_registry: false                # [OPTIONAL] Use Artifact Registry instead of GCR (default: false)
  #   repository: "my-product"                    # [OPTIONAL] Repository name (default: product.name)

  # --------------------------------------------------------------------------
  # Azure Container Registry Configuration
  # --------------------------------------------------------------------------
  # Uncomment and configure this section if using ACR
  # azure_acr:
  #   registry_name: "${AZURE_REGISTRY_NAME}"     # [REQUIRED] ACR registry name (supports env var, without .azurecr.io)
  #   # Authentication method (choose ONE):
  #   # Option 1: Service Principal (recommended for CI/CD)
  #   service_principal_id: "${AZURE_SP_ID}"      # [OPTIONAL] Service principal application ID (supports env var)
  #   service_principal_password: "${AZURE_SP_PASSWORD}"  # [OPTIONAL] Service principal secret (supports env var)
  #   # Option 2: Admin User (must be enabled in Azure Portal)
  #   # admin_username: "${AZURE_ADMIN_USERNAME}" # [OPTIONAL] Admin username (supports env var)
  #   # admin_password: "${AZURE_ADMIN_PASSWORD}" # [OPTIONAL] Admin password (supports env var)
  #   # Option 3: Azure CLI (default fallback)
  #   # If no credentials provided, uses 'az login' session
  #   # Requires prior 'az login' on local machine
  #   repository: "my-product"                    # [OPTIONAL] Repository name (default: product.name)

# IMPORTANT: Security Best Practices for Credentials
# =====================================================
# ALL REGISTRY PROVIDERS SUPPORT MULTIPLE AUTHENTICATION METHODS
# Choose the method that best fits your workflow:
#
# FOR LOCAL DEVELOPMENT:
# - Docker Hub: Use 'docker login' (credentials in ~/.docker/config.json)
# - AWS ECR: Use AWS CLI profile (credentials in ~/.aws/credentials)
# - Google GCR: Use 'gcloud auth login' or service account key file
# - Azure ACR: Use 'az login' or service principal
#
# FOR CI/CD ENVIRONMENTS:
# - ALL providers support environment variables: ${VAR_NAME}
# - Use secrets management in your CI/CD platform (GitHub Secrets, GitLab CI Variables, etc.)
# - Never commit credentials directly in this file
#
# ENVIRONMENT VARIABLE SYNTAX:
# - Simple: ${VAR_NAME} - expands to environment variable value
# - With default: ${VAR_NAME:-default} - uses 'default' if VAR_NAME is not set
# - Can be used in ANY string field in this config file
#
# EXAMPLES:
# - Docker Hub Token: access_token: "${DOCKER_HUB_TOKEN}"
# - AWS Account ID: account_id: "${AWS_ACCOUNT_ID}"
# - GCP Project: project_id: "${GCP_PROJECT_ID}"
# - With default: region: "${AWS_REGION:-us-east-1}"

# ==============================================================================
# Server Configuration
# ==============================================================================
servers:
  # System Server (nginx + SSL)
  # - For docker type: Runs nginx as reverse proxy to Application Server
  # - For static type: Runs nginx to serve static files AND stores deployed files
  system:
    host: "system.example.com"           # [REQUIRED] System Server IP or hostname
    user: "ubuntu"                       # [REQUIRED] SSH user
    ssh_key: "~/.ssh/system_server_key"  # [REQUIRED] SSH private key path (must exist locally)

  # Application Server (Docker containers)
  # - For docker type: Runs Docker containers (REQUIRED)
  # - For static type: Not used (can be omitted)
  application:
    host: "app.example.com"              # [REQUIRED for docker] Application Server public IP/hostname (for SSH)
    private_ip: "10.0.1.10"              # [REQUIRED for docker] Private IP within VPC (for nginx upstream)
    user: "ubuntu"                       # [REQUIRED for docker] SSH user
    ssh_key: "~/.ssh/app_server_key"     # [REQUIRED for docker] SSH private key path (must exist locally)

# ==============================================================================
# nginx Configuration
# ==============================================================================
# AXON automatically manages nginx configuration on System Server
# Run 'axon setup system-server' to initialize the nginx configuration
# Works for both docker (reverse proxy) and static (file serving) deployments
nginx:
  # Domain configuration for each environment
  # If not specified, uses catch-all server name "_" (accepts any domain)
  domain:
    production: "example.com"            # [OPTIONAL] Domain for production environment
    staging: "staging.example.com"       # [OPTIONAL] Domain for staging environment
    # development: "dev.example.com"     # [OPTIONAL] Domain for development environment

  # SSL certificate configuration for each environment
  # Provide paths to SSL certificate files on System Server
  # If not specified, HTTPS server block will not be generated
  ssl:
    production:
      certificate: "/etc/ssl/certs/example.com.crt"      # [REQUIRED for HTTPS] SSL certificate path
      certificate_key: "/etc/ssl/private/example.com.key" # [REQUIRED for HTTPS] SSL private key path
    staging:
      certificate: "/etc/ssl/certs/staging.example.com.crt"      # [REQUIRED for HTTPS] SSL certificate path
      certificate_key: "/etc/ssl/private/staging.example.com.key" # [REQUIRED for HTTPS] SSL private key path
    # development:
    #   certificate: "/etc/ssl/certs/dev.example.com.crt"
    #   certificate_key: "/etc/ssl/private/dev.example.com.key"

  # Proxy settings (reasonable defaults provided)
  proxy:
    timeout: 60                          # [OPTIONAL] Proxy timeout in seconds (default: 60)
    buffer_size: "128k"                  # [OPTIONAL] Proxy buffer size (default: 128k)
    buffers: "4 256k"                    # [OPTIONAL] Number and size of proxy buffers (default: 4 256k)
    busy_buffers_size: "256k"            # [OPTIONAL] Busy buffers size (default: 256k)

  # Advanced: Custom nginx properties (optional)
  # Add any nginx directives here - they will be inserted into each server block
  # This gives you full control over nginx configuration without modifying scripts
  # custom_properties: |                 # [OPTIONAL] Raw nginx directives
  #   # Custom headers
  #   add_header X-Frame-Options "SAMEORIGIN" always;
  #   add_header X-Content-Type-Options "nosniff" always;
  #   add_header X-XSS-Protection "1; mode=block" always;
  #
  #   # Client body size limit
  #   client_max_body_size 50M;
  #
  #   # Rate limiting (requires zone definition in main nginx.conf)
  #   # limit_req zone=api_limit burst=10 nodelay;
  #
  #   # Proxy caching (requires cache definition in main nginx.conf)
  #   # proxy_cache my_cache;
  #   # proxy_cache_valid 200 60m;

  # Advanced: nginx path overrides (rarely needed)
  # paths:
  #   config: "/etc/nginx/nginx.conf"    # [OPTIONAL] Main nginx config path (default: /etc/nginx/nginx.conf)
  #   axon_dir: "/etc/nginx/axon.d"      # [OPTIONAL] AXON config directory (default: /etc/nginx/axon.d)

# ==============================================================================
# Environment Configurations
# ==============================================================================
# You can define any number of environments (production, staging, development, qa, etc.)
# Each environment has its own configuration based on product.type
#
# For product.type: "docker" - Each environment needs:
#   - env_path: Path to .env file on Application Server
#   - image_tag: Docker image tag (optional)
#
# For product.type: "static" - Each environment needs:
#   - build_command: Command to build the static site
#   - build_output_dir: Directory containing built files
#   - deploy_path: Deployment path on System Server
#   - domain: Domain name for nginx configuration
#
environments:
  # --------------------------------------------------------------------------
  # Production Environment
  # --------------------------------------------------------------------------
  production:
    # Docker-specific settings (ONLY for product.type: "docker")
    env_path: "/home/ubuntu/apps/my-product/.env.production"  # [REQUIRED for docker] Path to .env file on Application Server
    image_tag: "production"                                   # [OPTIONAL for docker] Docker image tag (default: environment name)

    # Docker build arguments (ONLY for product.type: "docker")
    # Build args are passed to 'docker build' via --build-arg flags
    # These are embedded at BUILD TIME (different from runtime env vars in .env files)
    # Common use cases: Next.js NEXT_PUBLIC_* vars, React REACT_APP_* vars, build configs
    # build_args:                                             # [OPTIONAL for docker] Build-time environment variables
    #   NEXT_PUBLIC_API_URL: "https://api.example.com"        # Example: Next.js public variable
    #   NEXT_PUBLIC_ENVIRONMENT: "production"                 # Example: Environment identifier
    #   BUILD_VERSION: "1.2.3"                                # Example: Version info
    #   NODE_ENV: "production"                                # Example: Node environment (usually set automatically)

    # Static site settings (ONLY for product.type: "static")
    build_command: "npm run build:production"                 # [REQUIRED for static] Command to build static site
                                                              # Examples: "npm run build:prod", "hugo --environment production", "gatsby build"
    build_output_dir: "dist"                                  # [REQUIRED for static] Directory with built files (relative to project root)
                                                              # Examples: "dist", "build", "public", ".next", "_site"
    deploy_path: "/var/www/my-product-prod"                   # [REQUIRED for static] Deploy path on System Server
                                                              # Creates: {deploy_path}/releases/{timestamp}/
    domain: "example.com"                                     # [REQUIRED for static] Domain for nginx configuration

  # --------------------------------------------------------------------------
  # Staging Environment
  # --------------------------------------------------------------------------
  staging:
    # Docker-specific settings (ONLY for product.type: "docker")
    env_path: "/home/ubuntu/apps/my-product/.env.staging"    # [REQUIRED for docker] Path to .env file on Application Server
    image_tag: "staging"                                      # [OPTIONAL for docker] Docker image tag (default: environment name)

    # Docker build arguments (ONLY for product.type: "docker")
    # build_args:                                             # [OPTIONAL for docker] Build-time environment variables
    #   NEXT_PUBLIC_API_URL: "https://api-staging.example.com"
    #   NEXT_PUBLIC_ENVIRONMENT: "staging"

    # Static site settings (ONLY for product.type: "static")
    build_command: "npm run build:staging"                    # [REQUIRED for static] Command to build static site
    build_output_dir: "dist"                                  # [REQUIRED for static] Directory with built files
    deploy_path: "/var/www/my-product-staging"                # [REQUIRED for static] Deploy path on System Server
    domain: "staging.example.com"                             # [REQUIRED for static] Domain for nginx configuration

  # --------------------------------------------------------------------------
  # Custom Environment Example (optional)
  # --------------------------------------------------------------------------
  # You can define any environment name you need
  # development:
  #   # For docker:
  #   env_path: "/home/ubuntu/apps/my-product/.env.development"
  #   image_tag: "dev"
  #   # For static:
  #   build_command: "npm run build:dev"
  #   build_output_dir: "dist"
  #   deploy_path: "/var/www/my-product-dev"
  #   domain: "dev.example.com"

# ==============================================================================
# Health Check Configuration
# ==============================================================================
# ONLY used when product.type: "docker"
# For static type: Health checks performed via HTTP GET to domain
health_check:
  endpoint: "/api/health"                    # [OPTIONAL] Health check endpoint (default: /api/health)

  # Docker container health check settings (used by Docker daemon)
  interval: "30s"                            # [OPTIONAL] How often Docker checks (default: 30s)
  timeout: "10s"                             # [OPTIONAL] Max time to wait for response (default: 10s)
  retries: 3                                 # [OPTIONAL] Failed checks before unhealthy (default: 3)
  start_period: "40s"                        # [OPTIONAL] Grace period on startup (default: 40s)

  # Deployment verification (script polls Docker's health status)
  max_retries: 30                            # [OPTIONAL] Max polling attempts (default: 30)
  retry_interval: 2                          # [OPTIONAL] Seconds between polls (default: 2)

# ==============================================================================
# Deployment Options
# ==============================================================================
deployment:
  graceful_shutdown_timeout: 30  # [OPTIONAL] Seconds to wait for old container to shutdown gracefully (default: 30)
                                 # (SIGTERM → SIGKILL timeout)
  enable_auto_rollback: true     # [OPTIONAL] Auto rollback on deployment failure (default: true)

# ==============================================================================
# Docker Configuration
# ==============================================================================
# ONLY used when product.type: "docker"
# For static type: This entire section is ignored
docker:
  # Build configuration
  dockerfile: "Dockerfile"                  # [OPTIONAL] Path to Dockerfile (default: Dockerfile)
                                            # Can be relative to product root (e.g., "docker/Dockerfile.prod")

  # Container runtime configuration
  container_port: 3000                      # [OPTIONAL] Internal port the app listens on (default: 3000)
  restart_policy: "unless-stopped"          # [OPTIONAL] Docker restart policy (default: unless-stopped)
  shutdown_timeout: 30                      # [OPTIONAL] Graceful shutdown timeout in seconds (default: 30)
                                            # Time to wait for container to stop before sending SIGKILL

  # Network configuration
  # Template variables: ${PRODUCT_NAME}, ${ENVIRONMENT}
  network_driver: "bridge"                  # [OPTIONAL] Network driver (default: bridge)
  network_name: "application"               # [OPTIONAL] Network name (supports template variables)
  network_alias: "app"                      # [OPTIONAL] Stable DNS name (supports ${PRODUCT_NAME}, ${ENVIRONMENT} variables)

  # Common environment variables for all environments
  # These are set in the container, separate from .env files
  env_vars:                                 # [OPTIONAL] Environment variables
    NODE_ENV: "production"
    PORT: "3000"

  # Extra hosts mapping (allows container to access host services)
  extra_hosts:                              # [OPTIONAL] Extra host mappings
    - "host.docker.internal:host-gateway"

  # Logging configuration
  logging:                                  # [OPTIONAL] Logging configuration
    driver: "json-file"                     # [OPTIONAL] Logging driver (default: json-file)
    max_size: "10m"                         # [OPTIONAL] Max log file size (default: 10m)
    max_file: 3                             # [OPTIONAL] Max log files to keep (default: 3)

  # Advanced: Raw docker-compose override (optional)
  # Add any Docker Compose configuration here - it will be merged directly
  # This gives you full access to all Docker features without modifying scripts
  # compose_override: |                     # [OPTIONAL] Raw docker-compose YAML override
  #   volumes:
  #     - ./data:/app/data
  #   cap_add:
  #     - SYS_ADMIN
  #   devices:
  #     - /dev/fuse
  #   ulimits:
  #     nofile:
  #       soft: 65536
  #       hard: 65536
  #   security_opt:
  #     - seccomp:unconfined
  #   tmpfs:
  #     - /tmp:rw,noexec,nosuid
  #   # Any valid docker-compose service-level option works here!
